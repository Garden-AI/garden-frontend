/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/greet": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Greet Authed User */
    get: operations["greet_authed_user_greet_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/doi": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update Datacite */
    put: operations["update_datacite_doi_put"];
    /** Mint Draft Doi */
    post: operations["mint_draft_doi_doi_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/docker-push-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Push Session */
    get: operations["get_push_session_docker_push_token_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/notebook": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload Notebook */
    post: operations["upload_notebook_notebook_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/garden-search-record": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Publish Search Record
     * @deprecated
     */
    post: operations["publish_search_record_garden_search_record_post"];
    /**
     * Delete Search Record
     * @deprecated
     */
    delete: operations["delete_search_record_garden_search_record_delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/hello-database": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Hello Postgres */
    get: operations["hello_postgres_hello_database_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/entrypoints": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Entrypoints
     * @description Fetch multiple entrypoints according to query parameters.
     */
    get: operations["get_entrypoints_entrypoints_get"];
    put?: never;
    /** Add Entrypoint */
    post: operations["add_entrypoint_entrypoints_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/entrypoints/{doi}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Entrypoint By Doi */
    get: operations["get_entrypoint_by_doi_entrypoints__doi__get"];
    /** Create Or Replace Entrypoint */
    put: operations["create_or_replace_entrypoint_entrypoints__doi__put"];
    post?: never;
    /** Delete Entrypoint */
    delete: operations["delete_entrypoint_entrypoints__doi__delete"];
    options?: never;
    head?: never;
    /** Update Entrypoint */
    patch: operations["update_entrypoint_entrypoints__doi__patch"];
    trace?: never;
  };
  "/gardens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search Gardens
     * @description Fetch multiple gardens according to query parameters
     */
    get: operations["search_gardens_gardens_get"];
    put?: never;
    /** Add Garden */
    post: operations["add_garden_gardens_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/gardens/{doi}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Garden By Doi */
    get: operations["get_garden_by_doi_gardens__doi__get"];
    /** Create Or Replace Garden */
    put: operations["create_or_replace_garden_gardens__doi__put"];
    post?: never;
    /** Delete Garden */
    delete: operations["delete_garden_gardens__doi__delete"];
    options?: never;
    head?: never;
    /** Update Garden */
    patch: operations["update_garden_gardens__doi__patch"];
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Info
     * @description Return the user profile info for the current authed user.
     */
    get: operations["get_user_info_users_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update User Info
     * @description Update the user profile info for the current authed user.
     */
    patch: operations["update_user_info_users_patch"];
    trace?: never;
  };
  "/users/{user_uuid}/saved/gardens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Saved Gardens
     * @description Fetch the users list of saved gardens.
     */
    get: operations["get_saved_gardens_users__user_uuid__saved_gardens_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{user_uuid}/saved/gardens/{doi}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Save Garden
     * @description Add a garden to the user's list of saved gardens by doi.
     */
    put: operations["save_garden_users__user_uuid__saved_gardens__doi__put"];
    post?: never;
    /**
     * Remove Saved Garden
     * @description Remove a garden from the user's list of saved gardens by doi.
     */
    delete: operations["remove_saved_garden_users__user_uuid__saved_gardens__doi__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/status/failed-updates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Failed Updates
     * @description Fetch Failed Search Index Updates
     */
    get: operations["get_failed_updates_status_failed_updates_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/modal-invocations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Invoke Modal Fn */
    post: operations["invoke_modal_fn_modal_invocations_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/modal-apps": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add Modal App */
    post: operations["add_modal_app_modal_apps_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/modal-apps/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Modal Apps */
    get: operations["get_modal_apps_modal_apps__id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mdf/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Search Datasets
     * @description Accepts Globus GSearchRequest in request body.
     *     Acts as an intermediary for querying MDF's globus search index and then augments the query results with
     *     any accelerate metadata stored in the garden backend (connected_entrypoints, owner_identity_id, etc..)
     *
     *     Does not require user auth since MDF search index also does not require auth.
     *     Does not support globus search scroll queries.
     */
    post: operations["search_datasets_mdf_search_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Greet World */
    get: operations["greet_world__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AccelerateDatasetMetadata */
    AccelerateDatasetMetadata: {
      /**
       * Owner Identity Id
       * Format: uuid
       */
      owner_identity_id: string;
      /** Connected Entrypoints */
      connected_entrypoints?: string[];
      /** Previous Versions */
      previous_versions?: string[] | null;
    };
    /** AffiliationItem */
    AffiliationItem: {
      /** Affiliationidentifier */
      affiliationIdentifier?: string | null;
      /** Affiliationidentifierscheme */
      affiliationIdentifierScheme?: string | null;
      /** Name */
      name?: string | null;
      /** Schemeuri */
      schemeUri?: string | null;
    };
    /** AlternateIdentifier */
    AlternateIdentifier: {
      /** Alternateidentifiertype */
      alternateIdentifierType?: string | null;
      /** Alternateidentifier */
      alternateIdentifier?: string | null;
    };
    /** BucketFacetResult */
    BucketFacetResult: {
      /** Name */
      name?: string | null;
      /** Buckets */
      buckets?: components["schemas"]["GBucket"][] | null;
    };
    /** Citations */
    Citations: {
      data?: components["schemas"]["DoiDataArray"] | null;
    };
    /** CitationsOverTimeItem */
    CitationsOverTimeItem: {
      /** Yearmonth */
      yearMonth?: string | null;
      /** Total */
      total?: number | null;
    };
    /** Client1 */
    Client1: {
      data?: components["schemas"]["DoiDataObject"] | null;
    };
    /** Container */
    Container: {
      /** Type */
      type?: string | null;
      /** Identifier */
      identifier?: string | null;
      /** Identifiertype */
      identifierType?: string | null;
      /** Title */
      title?: string | null;
      /** Volume */
      volume?: string | null;
      /** Issue */
      issue?: string | null;
      /** Firstpage */
      firstPage?: string | null;
      /** Lastpage */
      lastPage?: string | null;
    };
    /** Contributor */
    Contributor: {
      nameType?: components["schemas"]["NameType"] | null;
      /** Nameidentifiers */
      nameIdentifiers?: components["schemas"]["NameIdentifier"][] | null;
      /** Name */
      name?: string | null;
      /** Givenname */
      givenName?: string | null;
      /** Familyname */
      familyName?: string | null;
      /** Affiliation */
      affiliation?: components["schemas"]["AffiliationItem"][] | null;
      contributorType?: components["schemas"]["ContributorType"] | null;
      /** Lang */
      lang?: string | null;
    };
    /** Contributor1 */
    Contributor1: {
      /** Name */
      name?: string | null;
      /** Givenname */
      givenName?: string | null;
      /** Familyname */
      familyName?: string | null;
      nameType?: components["schemas"]["NameType"] | null;
      contributorType?: components["schemas"]["ContributorType"] | null;
    };
    /**
     * ContributorType
     * @enum {string}
     */
    ContributorType:
      | "ContactPerson"
      | "DataCollector"
      | "DataCurator"
      | "DataManager"
      | "Distributor"
      | "Editor"
      | "HostingInstitution"
      | "Producer"
      | "ProjectLeader"
      | "ProjectManager"
      | "ProjectMember"
      | "RegistrationAgency"
      | "RegistrationAuthority"
      | "RelatedPerson"
      | "Researcher"
      | "ResearchGroup"
      | "RightsHolder"
      | "Sponsor"
      | "Supervisor"
      | "WorkPackageLeader"
      | "Other";
    /** Coordinate */
    Coordinate: {
      /** Lat */
      lat: number;
      /** Lon */
      lon: number;
    };
    /**
     * Coordinate1
     * @description A linear ring is a closed series of line segments with three or more positions.
     *     The first and last positions must be equivalent.
     *
     *     Rings are represented as lists of '[lon,lat]' pairs.
     *
     *     A ring is a simple polygon without holes.
     *
     */
    Coordinate1: unknown[];
    /** Creator */
    Creator: {
      nameType?: components["schemas"]["NameType"] | null;
      /** Nameidentifiers */
      nameIdentifiers?: components["schemas"]["NameIdentifier"][] | null;
      /** Name */
      name?: string | null;
      /** Givenname */
      givenName?: string | null;
      /** Familyname */
      familyName?: string | null;
      /** Affiliation */
      affiliation?: components["schemas"]["AffiliationItem"][] | null;
      /** Lang */
      lang?: string | null;
    };
    /** Creator1 */
    Creator1: {
      /** Name */
      name?: string | null;
      /** Givenname */
      givenName?: string | null;
      /** Familyname */
      familyName?: string | null;
      nameType?: components["schemas"]["NameType"] | null;
    };
    /** Date */
    Date: {
      /** Date */
      date?: string | null;
      dateType?: components["schemas"]["DateType"] | null;
      /** Dateinformation */
      dateInformation?: string | null;
    };
    /** DateHistogramFacet */
    DateHistogramFacet: {
      /**
       * Field Name
       * @description The field to which the facet refers.
       *     Any dots (`.`) must be escaped with a preceding backslash (`\`) character.
       */
      field_name: string;
      /**
       * Name
       * @description A name for this facet which is referenced in the results.
       *
       *     If `name` is omitted, it will default to the value of the `field_name` property. If more than one facet in a single search request references the same field, a name *must* be provided.
       */
      name?: string | null;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "date_histogram";
      histogram_range?: components["schemas"]["DateHistogramRange"] | null;
      date_interval: components["schemas"]["DateInterval"];
    };
    /** DateHistogramRange */
    DateHistogramRange: {
      /** Low */
      low?: unknown | null;
      /** High */
      high?: unknown | null;
    };
    /**
     * DateInterval
     * @enum {string}
     */
    DateInterval: "year" | "quarter" | "month" | "week" | "day" | "hour" | "minute" | "second";
    /**
     * DateType
     * @enum {string}
     */
    DateType:
      | "Accepted"
      | "Available"
      | "Copyrighted"
      | "Collected"
      | "Created"
      | "Issued"
      | "Submitted"
      | "Updated"
      | "Valid"
      | "Withdrawn"
      | "Other";
    /** DeleteSearchRecordRequest */
    DeleteSearchRecordRequest: {
      /** Doi */
      doi: string;
    };
    /** Description */
    Description: {
      /** Description */
      description?: string | null;
      descriptionType?: components["schemas"]["DescriptionType"] | null;
      /** Lang */
      lang?: string | null;
    };
    /**
     * DescriptionType
     * @enum {string}
     */
    DescriptionType:
      | "Abstract"
      | "Methods"
      | "SeriesInformation"
      | "TableOfContents"
      | "TechnicalInfo"
      | "Other";
    /** Doi */
    Doi: {
      data: components["schemas"]["DoiData"];
    };
    /** DoiAttributes */
    DoiAttributes: {
      /** Created */
      created?: string | null;
      /** Registered */
      registered?: string | null;
      /** Updated */
      updated?: string | null;
      /** Url */
      url?: string | null;
      /** Contenturl */
      contentUrl?: string[] | null;
      /** Metadataversion */
      metadataVersion?: number | null;
      /** Schemaversion */
      schemaVersion?: string | null;
      /** Source */
      source?: string | null;
      /** Isactive */
      isActive?: boolean | null;
      /** State */
      state?: string | null;
      /** Reason */
      reason?: string | null;
      /** Creators */
      creators?: components["schemas"]["Creator"][] | null;
      /** Titles */
      titles?: components["schemas"]["Title"][] | null;
      /** Publisher */
      publisher?: components["schemas"]["Publisher"] | string | null;
      container?: components["schemas"]["Container"] | null;
      /** Publicationyear */
      publicationYear?: number | null;
      /** Subjects */
      subjects?: components["schemas"]["Subject"][] | null;
      /** Contributors */
      contributors?: components["schemas"]["Contributor"][] | null;
      /** Dates */
      dates?: components["schemas"]["Date"][] | null;
      /** Language */
      language?: string | null;
      types?: components["schemas"]["Types"] | null;
      /** Relatedidentifiers */
      relatedIdentifiers?: components["schemas"]["RelatedIdentifier"][] | null;
      /** Relateditems */
      relatedItems?: components["schemas"]["RelatedItem"][] | null;
      /** Sizes */
      sizes?: string[] | null;
      /** Formats */
      formats?: string[] | null;
      /** Version */
      version?: string | null;
      /** Rightslist */
      rightsList?: components["schemas"]["RightsListItem"][] | null;
      /** Descriptions */
      descriptions?: components["schemas"]["Description"][] | null;
      /** Geolocations */
      geoLocations?: components["schemas"]["GeoLocation"][] | null;
      /** Fundingreferences */
      fundingReferences?: components["schemas"]["FundingReference"][] | null;
      /** Doi */
      doi?: string | null;
      /** @description Can be set to trigger a DOI state change. */
      event?: components["schemas"]["Event"] | null;
      /** Prefix */
      prefix?: string | null;
      /** Suffix */
      suffix?: string | null;
      /** Identifiers */
      identifiers?: components["schemas"]["Identifier"][] | null;
      /** Alternateidentifiers */
      alternateIdentifiers?: components["schemas"]["AlternateIdentifier"][] | null;
      /** Xml */
      xml?: string | null;
      /** Viewcount */
      viewCount?: number | null;
      /** Viewsovertime */
      viewsOverTime?: components["schemas"]["ViewsOverTimeItem"][] | null;
      /** Downloadcount */
      downloadCount?: number | null;
      /** Downloadsovertime */
      downloadsOverTime?: components["schemas"]["DownloadsOverTimeItem"][] | null;
      /** Referencecount */
      referenceCount?: number | null;
      /** Citationcount */
      citationCount?: number | null;
      /** Citationsovertime */
      citationsOverTime?: components["schemas"]["CitationsOverTimeItem"][] | null;
      /** Partcount */
      partCount?: number | null;
      /** Partofcount */
      partOfCount?: number | null;
      /** Versioncount */
      versionCount?: number | null;
      /** Versionofcount */
      versionOfCount?: number | null;
      /** @description Data describing the landing page, used by link checking. */
      landingPage?: components["schemas"]["LandingPage"] | null;
    };
    /** DoiData */
    DoiData: {
      /** Id */
      id?: string | null;
      type: components["schemas"]["Type"];
      attributes: components["schemas"]["DoiAttributes"];
      relationships?: components["schemas"]["Relationships"] | null;
    };
    /** DoiDataArray */
    DoiDataArray: components["schemas"]["DoiDataObject"][];
    /** DoiDataObject */
    DoiDataObject: {
      /** Id */
      id?: string | null;
      /** Type */
      type?: string | null;
    };
    /** DownloadsOverTimeItem */
    DownloadsOverTimeItem: {
      /** Yearmonth */
      yearMonth?: string | null;
      /** Total */
      total?: number | null;
    };
    /** ECRPushCredentials */
    ECRPushCredentials: {
      /** Accesskeyid */
      AccessKeyId: string;
      /** Secretaccesskey */
      SecretAccessKey: string;
      /** Sessiontoken */
      SessionToken: string;
      /** Ecrrepo */
      ECRRepo: string;
      /**
       * Regionname
       * @default us-east-1
       */
      RegionName: string;
    };
    /** EntrypointCreateRequest */
    EntrypointCreateRequest: {
      /** Doi */
      doi: string;
      /** Doi Is Draft */
      doi_is_draft: boolean;
      /** Title */
      title: string;
      /** Description */
      description: string | null;
      /** Year */
      year: string;
      /**
       * Func Uuid
       * Format: uuid
       */
      func_uuid: string;
      /**
       * Container Uuid
       * Format: uuid
       */
      container_uuid: string;
      /** Base Image Uri */
      base_image_uri: string;
      /** Full Image Uri */
      full_image_uri: string;
      /**
       * Notebook Url
       * Format: uri
       */
      notebook_url: string;
      /**
       * Is Archived
       * @default false
       */
      is_archived: boolean;
      /** Short Name */
      short_name: string;
      /** Function Text */
      function_text: string;
      /** Authors */
      authors?: string[];
      /** Tags */
      tags?: string[];
      /** Test Functions */
      test_functions?: string[];
      /** Requirements */
      requirements?: string[];
      /** Models */
      models?: components["schemas"]["src__api__schemas__entrypoint___ModelMetadata"][];
      /** Repositories */
      repositories?: components["schemas"]["_RepositoryMetadata-Input"][];
      /** Papers */
      papers?: components["schemas"]["_PaperMetadata"][];
      /** Datasets */
      datasets?: components["schemas"]["_DatasetMetadata-Input"][];
      /** Owner Identity Id */
      owner_identity_id?: string | null;
    };
    /** EntrypointMetadataResponse */
    EntrypointMetadataResponse: {
      /** Doi */
      doi: string;
      /** Doi Is Draft */
      doi_is_draft: boolean;
      /** Title */
      title: string;
      /** Description */
      description: string | null;
      /** Year */
      year: string;
      /**
       * Func Uuid
       * Format: uuid
       */
      func_uuid: string;
      /**
       * Container Uuid
       * Format: uuid
       */
      container_uuid: string;
      /** Base Image Uri */
      base_image_uri: string;
      /** Full Image Uri */
      full_image_uri: string;
      /** Notebook Url */
      notebook_url: string;
      /**
       * Is Archived
       * @default false
       */
      is_archived: boolean;
      /** Short Name */
      short_name: string;
      /** Function Text */
      function_text: string;
      /** Authors */
      authors?: string[];
      /** Tags */
      tags?: string[];
      /** Test Functions */
      test_functions?: string[];
      /** Requirements */
      requirements?: string[];
      /** Models */
      models?: components["schemas"]["_ModelMetadata-Output"][];
      /** Repositories */
      repositories?: components["schemas"]["_RepositoryMetadata-Output"][];
      /** Papers */
      papers?: components["schemas"]["_PaperMetadata"][];
      /** Datasets */
      datasets?: components["schemas"]["_DatasetMetadata-Output"][];
      /**
       * Owner Identity Id
       * Format: uuid
       */
      owner_identity_id: string;
      /** Id */
      id: number;
    };
    /** EntrypointPatchRequest */
    EntrypointPatchRequest: {
      /** Doi Is Draft */
      doi_is_draft?: boolean | null;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Year */
      year?: string | null;
      /** Func Uuid */
      func_uuid?: string | null;
      /** Container Uuid */
      container_uuid?: string | null;
      /** Base Image Uri */
      base_image_uri?: string | null;
      /** Full Image Uri */
      full_image_uri?: string | null;
      /** Notebook Url */
      notebook_url?: string | null;
      /** Is Archived */
      is_archived?: boolean | null;
      /** Short Name */
      short_name?: string | null;
      /** Function Text */
      function_text?: string | null;
      /** Authors */
      authors?: string[] | null;
      /** Tags */
      tags?: string[] | null;
      /** Test Functions */
      test_functions?: string[] | null;
      /** Requirements */
      requirements?: string[] | null;
      /** Models */
      models?: components["schemas"]["src__api__schemas__entrypoint___ModelMetadata"][] | null;
      /** Repositories */
      repositories?: components["schemas"]["_RepositoryMetadata-Input"][] | null;
      /** Papers */
      papers?: components["schemas"]["_PaperMetadata"][] | null;
      /** Datasets */
      datasets?: components["schemas"]["_DatasetMetadata-Input"][] | null;
    };
    /**
     * Event
     * @enum {string}
     */
    Event: "publish" | "register" | "hide";
    /** FailedSearchIndexUpdateResponse */
    FailedSearchIndexUpdateResponse: {
      /** Doi */
      doi: string;
      /** Operation Type */
      operation_type: string;
      /** Error Message */
      error_message: string;
      /** Retry Count */
      retry_count: number;
      /**
       * Last Attempt
       * Format: date-time
       */
      last_attempt: string;
    };
    /**
     * FilterPrincipalSet
     * @description The name of a 'principal_set' for use in principal set filtering.
     */
    FilterPrincipalSet: string;
    /**
     * FunderIdentifierType
     * @enum {string}
     */
    FunderIdentifierType: "Crossref Funder ID" | "GRID" | "ISNI" | "ROR" | "Other";
    /** FundingReference */
    FundingReference: {
      /** Fundername */
      funderName?: string | null;
      /** Funderidentifier */
      funderIdentifier?: string | null;
      funderIdentifierType?: components["schemas"]["FunderIdentifierType"] | null;
      /** Awardnumber */
      awardNumber?: string | null;
      /** Awarduri */
      awardUri?: string | null;
      /** Awardtitle */
      awardTitle?: string | null;
    };
    /** GBoost */
    GBoost: {
      /** Field Name */
      field_name: string;
      /** Factor */
      factor: number;
    };
    /** GBucket */
    GBucket: {
      /** Value */
      value?: unknown | null;
      /** Count */
      count?: number | null;
    };
    /** GFacet */
    GFacet:
      | components["schemas"]["TermsFacet"]
      | components["schemas"]["MetricFacet"]
      | components["schemas"]["DateHistogramFacet"]
      | components["schemas"]["NumericHistogramFacet"];
    /** GFacetResult */
    GFacetResult:
      | components["schemas"]["MetricFacetResult"]
      | components["schemas"]["BucketFacetResult"];
    /** GFilter */
    GFilter:
      | components["schemas"]["GFilterMatchAll"]
      | components["schemas"]["GFilterMatchAny"]
      | components["schemas"]["GFilterRange"]
      | components["schemas"]["GFilterBoundingBox"]
      | components["schemas"]["GFilterGeoShape"]
      | components["schemas"]["GFilterExists"]
      | components["schemas"]["GFilterNot"];
    /** GFilterBoundingBox */
    GFilterBoundingBox: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "geo_bounding_box";
      /**
       * Post Filter
       * @description Control whether or not this filter should be applied before or after facets are
       *     calculated. If True, the filter will not impact facet results, but will filter the
       *     query results.
       *
       *     Defaults to True for all filters except `match_all`, where it defaults to False.
       *
       *     When set on nested filters (e.g. under a `not`), only the top-level filter's setting
       *     is applied.
       *
       * @default true
       */
      post_filter: boolean | null;
      /** Field Name */
      field_name: string;
      /** @description A coordinate pair is a geographical point, expressed as an object with two keys, `lat`
       *     and `lon`, for latitude and longitude. The values must be floats, positive or negative,
       *     within the range of acceptable coordinate values: [-90.0, 90.0] for latitude, and
       *     [-180.0, 180.0] for longitude.
       *      */
      top_left: components["schemas"]["Coordinate"];
      /** @description A coordinate pair is a geographical point, expressed as an object with two keys, `lat`
       *     and `lon`, for latitude and longitude. The values must be floats, positive or negative,
       *     within the range of acceptable coordinate values: [-90.0, 90.0] for latitude, and
       *     [-180.0, 180.0] for longitude.
       *      */
      bottom_right: components["schemas"]["Coordinate"];
    };
    /** GFilterExists */
    GFilterExists: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "exists";
      /**
       * Post Filter
       * @description Control whether or not this filter should be applied before or after facets are
       *     calculated. If True, the filter will not impact facet results, but will filter the
       *     query results.
       *
       *     Defaults to True for all filters except `match_all`, where it defaults to False.
       *
       *     When set on nested filters (e.g. under a `not`), only the top-level filter's setting
       *     is applied.
       *
       * @default true
       */
      post_filter: boolean | null;
      /** Field Name */
      field_name: string;
    };
    /** GFilterGeoShape */
    GFilterGeoShape: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "geo_shape";
      /**
       * Post Filter
       * @description Control whether or not this filter should be applied before or after facets are
       *     calculated. If True, the filter will not impact facet results, but will filter the
       *     query results.
       *
       *     Defaults to True for all filters except `match_all`, where it defaults to False.
       *
       *     When set on nested filters (e.g. under a `not`), only the top-level filter's setting
       *     is applied.
       *
       * @default true
       */
      post_filter: boolean | null;
      /** Field Name */
      field_name: string;
      shape: components["schemas"]["GeoShape"];
      /**
       * @description The relationship between the provided shape and the queried field.
       *
       *     'intersects': (default) Return documents whose shape intersects the query shape.
       *     'within': Return documents whose shape is fully within the query shape.
       *
       * @default intersects
       */
      relation: components["schemas"]["Relation"] | null;
    };
    /** GFilterMatchAll */
    GFilterMatchAll: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "match_all";
      /**
       * Post Filter
       * @description Control whether or not this filter should be applied before or after facets are
       *     calculated. If True, the filter will not impact facet results, but will filter the
       *     query results.
       *
       *     Defaults to True for all filters except `match_all`, where it defaults to False.
       *
       *     When set on nested filters (e.g. under a `not`), only the top-level filter's setting
       *     is applied.
       *
       * @default false
       */
      post_filter: boolean | null;
      /** Field Name */
      field_name: string;
      /** Values */
      values: unknown[];
    };
    /** GFilterMatchAny */
    GFilterMatchAny: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "match_any";
      /**
       * Post Filter
       * @description Control whether or not this filter should be applied before or after facets are
       *     calculated. If True, the filter will not impact facet results, but will filter the
       *     query results.
       *
       *     Defaults to True for all filters except `match_all`, where it defaults to False.
       *
       *     When set on nested filters (e.g. under a `not`), only the top-level filter's setting
       *     is applied.
       *
       * @default true
       */
      post_filter: boolean | null;
      /** Field Name */
      field_name: string;
      /** Values */
      values: unknown[];
    };
    /** GFilterNot */
    GFilterNot: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "not";
      /**
       * Post Filter
       * @description Control whether or not this filter should be applied before or after facets are
       *     calculated. If True, the filter will not impact facet results, but will filter the
       *     query results.
       *
       *     Defaults to True for all filters except `match_all`, where it defaults to False.
       *
       *     When set on nested filters (e.g. under a `not`), only the top-level filter's setting
       *     is applied.
       *
       * @default true
       */
      post_filter: boolean | null;
      filter: components["schemas"]["GFilter"];
    };
    /** GFilterRange */
    GFilterRange: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "range";
      /**
       * Post Filter
       * @description Control whether or not this filter should be applied before or after facets are
       *     calculated. If True, the filter will not impact facet results, but will filter the
       *     query results.
       *
       *     Defaults to True for all filters except `match_all`, where it defaults to False.
       *
       *     When set on nested filters (e.g. under a `not`), only the top-level filter's setting
       *     is applied.
       *
       * @default true
       */
      post_filter: boolean | null;
      /** Field Name */
      field_name: string;
      /** Values */
      values: components["schemas"]["RangeFilterValue"][];
    };
    /** GSearchRequestBody */
    GSearchRequestBody: {
      /** Q */
      q?: string | null;
      /**
       * Limit
       * @default 10
       */
      limit: number | null;
      /**
       * Advanced
       * @default false
       */
      advanced: boolean | null;
      /**
       * Bypass Visible To
       * @description Set to true to allow this operation to return data with visibility which does not include the current user. Only allowed for index admins and owners.
       * @default false
       */
      bypass_visible_to: boolean | null;
      /** Filter Principal Sets */
      filter_principal_sets?: components["schemas"]["FilterPrincipalSet"][] | null;
      /** Offset */
      offset?: number | null;
      /**
       * @description Used to request results in the legacy (2017-09-01) format
       * @default 2019-08-27
       */
      result_format_version: components["schemas"]["ResultFormatVersion"] | null;
      /** Facets */
      facets?: components["schemas"]["GFacet"][] | null;
      /** Filters */
      filters?: components["schemas"]["GFilter"][] | null;
      /** Boosts */
      boosts?: components["schemas"]["GBoost"][] | null;
      /** Sort */
      sort?: components["schemas"]["GSort"][] | null;
    };
    /** GSort */
    GSort: {
      /** Field Name */
      field_name: string;
      /** @default desc */
      order: components["schemas"]["Order"] | null;
    };
    /** GardenCreateRequest */
    GardenCreateRequest: {
      /** Title */
      title: string;
      /** Authors */
      authors?: string[];
      /** Contributors */
      contributors?: string[];
      /** Doi */
      doi: string;
      /** Doi Is Draft */
      doi_is_draft?: boolean | null;
      /** Description */
      description: string | null;
      /**
       * Publisher
       * @default Garden-AI
       */
      publisher: string;
      /** Year */
      year?: string;
      /**
       * Language
       * @default en
       */
      language: string;
      /** Tags */
      tags?: string[];
      /**
       * Version
       * @default 0.0.1
       */
      version: string;
      /** Entrypoint Aliases */
      entrypoint_aliases?: {
        [key: string]: string;
      };
      /**
       * Is Archived
       * @default false
       */
      is_archived: boolean;
      /** Entrypoint Ids */
      entrypoint_ids?: string[];
      /** Modal Function Ids */
      modal_function_ids?: number[];
      /** Owner Identity Id */
      owner_identity_id?: string | null;
    };
    /** GardenMetadataResponse */
    GardenMetadataResponse: {
      /** Title */
      title: string;
      /** Authors */
      authors?: string[];
      /** Contributors */
      contributors?: string[];
      /** Doi */
      doi: string;
      /** Doi Is Draft */
      doi_is_draft?: boolean | null;
      /** Description */
      description: string | null;
      /**
       * Publisher
       * @default Garden-AI
       */
      publisher: string;
      /** Year */
      year?: string;
      /**
       * Language
       * @default en
       */
      language: string;
      /** Tags */
      tags?: string[];
      /**
       * Version
       * @default 0.0.1
       */
      version: string;
      /** Entrypoint Aliases */
      entrypoint_aliases?: {
        [key: string]: string;
      };
      /**
       * Is Archived
       * @default false
       */
      is_archived: boolean;
      /**
       * Owner Identity Id
       * Format: uuid
       */
      owner_identity_id: string;
      /** Id */
      id: number;
      /** Entrypoints */
      entrypoints?: components["schemas"]["EntrypointMetadataResponse"][];
      /** Modal Functions */
      modal_functions?: components["schemas"]["ModalFunctionMetadataResponse"][];
      /** Entrypoint Ids */
      readonly entrypoint_ids: string[];
      /** Modal Function Ids */
      readonly modal_function_ids: string[];
    };
    /** GardenPatchRequest */
    GardenPatchRequest: {
      /** Title */
      title?: string | null;
      /** Authors */
      authors?: string[] | null;
      /** Contributors */
      contributors?: string[] | null;
      /** Doi Is Draft */
      doi_is_draft?: boolean | null;
      /** Description */
      description?: string | null;
      /** Publisher */
      publisher?: string | null;
      /** Year */
      year?: string | null;
      /** Language */
      language?: string | null;
      /** Tags */
      tags?: string[] | null;
      /** Version */
      version?: string | null;
      /** Entrypoint Aliases */
      entrypoint_aliases?: {
        [key: string]: string;
      };
      /** Is Archived */
      is_archived?: boolean | null;
      /** Entrypoint Ids */
      entrypoint_ids?: string[] | null;
    };
    /** GeoLocation */
    GeoLocation: {
      geoLocationPoint?: components["schemas"]["GeoLocationPoint"] | null;
      geoLocationBox?: components["schemas"]["GeoLocationBox"] | null;
      /** Geolocationplace */
      geoLocationPlace?: string | null;
    };
    /** GeoLocationBox */
    GeoLocationBox: {
      /** Westboundlongitude */
      westBoundLongitude?: string | null;
      /** Eastboundlongitude */
      eastBoundLongitude?: string | null;
      /** Southboundlatitude */
      southBoundLatitude?: string | null;
      /** Northboundlatitude */
      northBoundLatitude?: string | null;
    };
    /** GeoLocationPoint */
    GeoLocationPoint: {
      /** Pointlongitude */
      pointLongitude?: string | null;
      /** Pointlatitude */
      pointLatitude?: string | null;
    };
    /** GeoPolygon */
    GeoPolygon: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "Polygon";
      /** Coordinates */
      coordinates: components["schemas"]["Coordinate1"][];
    };
    /** GeoShape */
    GeoShape: components["schemas"]["GeoPolygon"];
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Identifier */
    Identifier: {
      /** Identifier */
      identifier?: string | null;
      /** Identifiertype */
      identifierType?: string | null;
    };
    /** LandingPage */
    LandingPage: {
      /** Checked */
      checked?: string | null;
      /** Url */
      url?: string | null;
      /** Contenttype */
      contentType?: string | null;
      /** Error */
      error?: string | null;
      /** Redirectcount */
      redirectCount?: number | null;
      /** Redirecturls */
      redirectUrls?: string[] | null;
      /** Downloadlatency */
      downloadLatency?: number | null;
      /** Hasschemaorg */
      hasSchemaOrg?: boolean | null;
      /** Schemaorgid */
      schemaOrgid?: string | null;
      /** Dcidentifier */
      dcIdentifier?: string | null;
      /** Citationdoi */
      citationDoi?: string | null;
      /** Bodyhaspid */
      bodyhasPid?: boolean | null;
    };
    /** MDFGMetaResult */
    MDFGMetaResult:
      | components["schemas"]["MDFLegacyResult"]
      | components["schemas"]["MDFModernResult"];
    /** MDFLegacyResult */
    MDFLegacyResult: {
      /** Subject */
      subject?: string | null;
      /**
       * @Version
       * @default 2017-09-01
       */
      "@version": unknown | null;
      /** Content */
      content?: unknown | null;
      /** Entry Ids */
      entry_ids?: unknown | null;
      accelerate_metadata?: components["schemas"]["AccelerateDatasetMetadata"] | null;
    };
    /** MDFModernResult */
    MDFModernResult: {
      /** Subject */
      subject?: string | null;
      /**
       * @Version
       * @default 2019-08-27
       */
      "@version": unknown | null;
      /** Entries */
      entries?: Record<string, never>[] | null;
      accelerate_metadata?: components["schemas"]["AccelerateDatasetMetadata"] | null;
    };
    /** MDFSearchResponse */
    MDFSearchResponse: {
      /** Total */
      total?: number | null;
      /**
       * Count
       * @description The length of the 'gmeta' array.
       */
      count?: number | null;
      /** Gmeta */
      gmeta?: components["schemas"]["MDFGMetaResult"][] | null;
      /**
       * Has Next Page
       * @description True if another page of results is available with pagination.
       */
      has_next_page?: boolean | null;
      /** Offset */
      offset?: number | null;
      /** Facet Results */
      facet_results?: components["schemas"]["GFacetResult"][] | null;
    };
    /** Media */
    Media: {
      data?: components["schemas"]["DoiDataObject"] | null;
    };
    /** MetricFacet */
    MetricFacet: {
      /**
       * Field Name
       * @description The field to which the facet refers.
       *     Any dots (`.`) must be escaped with a preceding backslash (`\`) character.
       */
      field_name: string;
      /**
       * Name
       * @description A name for this facet which is referenced in the results.
       *
       *     If `name` is omitted, it will default to the value of the `field_name` property. If more than one facet in a single search request references the same field, a name *must* be provided.
       */
      name?: string | null;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "avg" | "sum";
      /** Missing */
      missing?: number | null;
    };
    /** MetricFacetResult */
    MetricFacetResult: {
      /** Name */
      name?: string | null;
      /** Value */
      value?: number | null;
    };
    /** ModalAppCreateRequest */
    ModalAppCreateRequest: {
      /** App Name */
      app_name: string;
      /** Modal Function Names */
      modal_function_names?: string[];
      /** File Contents */
      file_contents: string;
      /** Requirements */
      requirements?: string[];
      /** Base Image Name */
      base_image_name: string;
      /** Owner Identity Id */
      owner_identity_id?: string | null;
      /** Modal Functions */
      modal_functions?: components["schemas"]["ModalFunctionMetadata"][];
    };
    /** ModalAppMetadataResponse */
    ModalAppMetadataResponse: {
      /** App Name */
      app_name: string;
      /** Modal Function Names */
      modal_function_names?: string[];
      /** File Contents */
      file_contents: string;
      /** Requirements */
      requirements?: string[];
      /** Base Image Name */
      base_image_name: string;
      /**
       * Owner Identity Id
       * Format: uuid
       */
      owner_identity_id: string;
      /** Id */
      id: number;
      /** Modal Functions */
      modal_functions?: components["schemas"]["ModalFunctionMetadataResponse"][];
      /** Modal Function Ids */
      readonly modal_function_ids: string[];
    };
    /** ModalFunctionMetadata */
    ModalFunctionMetadata: {
      /** Doi */
      doi: string | null;
      /** Title */
      title: string;
      /** Description */
      description: string | null;
      /** Year */
      year: string;
      /**
       * Is Archived
       * @default false
       */
      is_archived: boolean;
      /** Function Name */
      function_name: string;
      /** Function Text */
      function_text: string;
      /** Authors */
      authors?: string[];
      /** Tags */
      tags?: string[];
      /** Test Functions */
      test_functions?: string[];
      /** Requirements */
      requirements?: string[];
      /** Models */
      models?: components["schemas"]["src__api__schemas__modal__modal_function___ModelMetadata"][];
      /** Repositories */
      repositories?: components["schemas"]["_RepositoryMetadata-Input"][];
      /** Papers */
      papers?: components["schemas"]["_PaperMetadata"][];
      /** Datasets */
      datasets?: components["schemas"]["_DatasetMetadata-Input"][];
    };
    /** ModalFunctionMetadataResponse */
    ModalFunctionMetadataResponse: {
      /** Doi */
      doi: string | null;
      /** Title */
      title: string;
      /** Description */
      description: string | null;
      /** Year */
      year: string;
      /**
       * Is Archived
       * @default false
       */
      is_archived: boolean;
      /** Function Name */
      function_name: string;
      /** Function Text */
      function_text: string;
      /** Authors */
      authors?: string[];
      /** Tags */
      tags?: string[];
      /** Test Functions */
      test_functions?: string[];
      /** Requirements */
      requirements?: string[];
      /** Models */
      models?: components["schemas"]["_ModelMetadata-Output"][];
      /** Repositories */
      repositories?: components["schemas"]["_RepositoryMetadata-Output"][];
      /** Papers */
      papers?: components["schemas"]["_PaperMetadata"][];
      /** Datasets */
      datasets?: components["schemas"]["_DatasetMetadata-Output"][];
      /** Id */
      id: number;
      /** Modal App Id */
      modal_app_id: number;
    };
    /** ModalInvocationRequest */
    ModalInvocationRequest: {
      /** App Name */
      app_name: string;
      /** Function Name */
      function_name: string;
      /**
       * Args Kwargs Serialized
       * Format: binary
       */
      args_kwargs_serialized: string;
    };
    /** ModalInvocationResponse */
    ModalInvocationResponse: {
      result: components["schemas"]["_ModalGenericResult"];
      /** Data Format */
      data_format: number;
    };
    /** NameIdentifier */
    NameIdentifier: {
      /** Nameidentifier */
      nameIdentifier?: string | null;
      /** Nameidentifierscheme */
      nameIdentifierScheme?: string | null;
      /** Schemeuri */
      schemeUri?: string | null;
    };
    /**
     * NameType
     * @enum {string}
     */
    NameType: "Personal" | "Organizational";
    /**
     * NumberType
     * @enum {string}
     */
    NumberType: "Article" | "Chapter" | "Report" | "Other";
    /** NumericHistogramFacet */
    NumericHistogramFacet: {
      /**
       * Field Name
       * @description The field to which the facet refers.
       *     Any dots (`.`) must be escaped with a preceding backslash (`\`) character.
       */
      field_name: string;
      /**
       * Name
       * @description A name for this facet which is referenced in the results.
       *
       *     If `name` is omitted, it will default to the value of the `field_name` property. If more than one facet in a single search request references the same field, a name *must* be provided.
       */
      name?: string | null;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "numeric_histogram";
      /** Size */
      size: number;
      histogram_range: components["schemas"]["NumericHistogramRange"];
    };
    /** NumericHistogramRange */
    NumericHistogramRange: {
      /** Low */
      low: number;
      /** High */
      high: number;
    };
    /**
     * Order
     * @enum {string}
     */
    Order: "asc" | "desc";
    /** PartOf */
    PartOf: {
      data?: components["schemas"]["DoiDataArray"] | null;
    };
    /** Parts */
    Parts: {
      data?: components["schemas"]["DoiDataArray"] | null;
    };
    /** Provider */
    Provider: {
      data?: components["schemas"]["DoiDataObject"] | null;
    };
    /** Publisher */
    Publisher: {
      /** Name */
      name?: string | null;
      /** Publisheridentifier */
      publisherIdentifier?: string | null;
      /** Publisheridentifierscheme */
      publisherIdentifierScheme?: string | null;
      /** Schemeuri */
      schemeUri?: string | null;
      /** Lang */
      lang?: string | null;
    };
    /** RangeFilterValue */
    RangeFilterValue: {
      /** From */
      from: unknown;
      /** To */
      to: unknown;
    };
    /** References */
    References: {
      data?: components["schemas"]["DoiDataArray"] | null;
    };
    /** RelatedIdentifier */
    RelatedIdentifier: {
      /** Relatedidentifier */
      relatedIdentifier?: string | null;
      relatedIdentifierType?: components["schemas"]["RelatedIdentifierType"] | null;
      relationType?: components["schemas"]["RelationType"] | null;
      resourceTypeGeneral?: components["schemas"]["ResourceTypeGeneral"] | null;
      /** Relatedmetadatascheme */
      relatedMetadataScheme?: string | null;
      /** Schemeuri */
      schemeUri?: string | null;
      /** Schemetype */
      schemeType?: string | null;
    };
    /**
     * RelatedIdentifierType
     * @enum {string}
     */
    RelatedIdentifierType:
      | "ARK"
      | "arXiv"
      | "bibcode"
      | "DOI"
      | "EAN13"
      | "EISSN"
      | "Handle"
      | "IGSN"
      | "ISBN"
      | "ISSN"
      | "ISTC"
      | "LISSN"
      | "LSID"
      | "PMID"
      | "PURL"
      | "UPC"
      | "URL"
      | "URN"
      | "w3id";
    /** RelatedItem */
    RelatedItem: {
      relatedItemType?: components["schemas"]["ResourceTypeGeneral"] | null;
      relationType?: components["schemas"]["RelationType"] | null;
      relatedItemIdentifier?: components["schemas"]["RelatedItemIdentifier"] | null;
      /** Creators */
      creators?: components["schemas"]["Creator1"][] | null;
      /** Titles */
      titles?: components["schemas"]["Title1"][] | null;
      /** Volume */
      volume?: string | null;
      /** Issue */
      issue?: string | null;
      /** Number */
      number?: string | null;
      numberType?: components["schemas"]["NumberType"] | null;
      /** Firstpage */
      firstPage?: string | null;
      /** Lastpage */
      lastPage?: string | null;
      /** Publisher */
      publisher?: string | null;
      /** Publicationyear */
      publicationYear?: string | null;
      /** Edition */
      edition?: string | null;
      /** Contributors */
      contributors?: components["schemas"]["Contributor1"][] | null;
    };
    /** RelatedItemIdentifier */
    RelatedItemIdentifier: {
      /** Relateditemidentifier */
      relatedItemIdentifier?: string | null;
      relatedItemIdentifierType?: components["schemas"]["RelatedIdentifierType"] | null;
      /** Relatedmetadatascheme */
      relatedMetadataScheme?: string | null;
      /** Schemeuri */
      schemeURI?: string | null;
      /** Schemetype */
      schemeType?: string | null;
    };
    /**
     * Relation
     * @enum {string}
     */
    Relation: "intersects" | "within";
    /**
     * RelationType
     * @enum {string}
     */
    RelationType:
      | "IsCitedBy"
      | "Cites"
      | "IsSupplementTo"
      | "IsSupplementedBy"
      | "IsContinuedBy"
      | "Continues"
      | "IsDescribedBy"
      | "Describes"
      | "HasMetadata"
      | "IsMetadataFor"
      | "HasVersion"
      | "IsVersionOf"
      | "IsNewVersionOf"
      | "IsPreviousVersionOf"
      | "IsPartOf"
      | "HasPart"
      | "IsPublishedIn"
      | "IsReferencedBy"
      | "References"
      | "IsDocumentedBy"
      | "Documents"
      | "IsCompiledBy"
      | "Compiles"
      | "IsVariantFormOf"
      | "IsOriginalFormOf"
      | "IsIdenticalTo"
      | "IsReviewedBy"
      | "Reviews"
      | "IsDerivedFrom"
      | "IsSourceOf"
      | "IsRequiredBy"
      | "Requires"
      | "IsObsoletedBy"
      | "Obsoletes"
      | "IsCollectedBy"
      | "Collects";
    /** Relationships */
    Relationships: {
      client?: components["schemas"]["Client1"] | null;
      provider?: components["schemas"]["Provider"] | null;
      media?: components["schemas"]["Media"] | null;
      references?: components["schemas"]["References"] | null;
      citations?: components["schemas"]["Citations"] | null;
      parts?: components["schemas"]["Parts"] | null;
      partOf?: components["schemas"]["PartOf"] | null;
      versions?: components["schemas"]["Versions"] | null;
      versionOf?: components["schemas"]["VersionOf"] | null;
    };
    /**
     * ResourceTypeGeneral
     * @enum {string}
     */
    ResourceTypeGeneral:
      | "Audiovisual"
      | "Book"
      | "BookChapter"
      | "Collection"
      | "ComputationalNotebook"
      | "ConferencePaper"
      | "ConferenceProceeding"
      | "DataPaper"
      | "Dataset"
      | "Dissertation"
      | "Event"
      | "Image"
      | "Instrument"
      | "InteractiveResource"
      | "Journal"
      | "JournalArticle"
      | "Model"
      | "OutputManagementPlan"
      | "PeerReview"
      | "PhysicalObject"
      | "Preprint"
      | "Report"
      | "Service"
      | "Software"
      | "Sound"
      | "Standard"
      | "StudyRegistration"
      | "Text"
      | "Workflow"
      | "Other";
    /**
     * ResultFormatVersion
     * @enum {string}
     */
    ResultFormatVersion: "2017-09-01" | "2019-08-27";
    /** RightsListItem */
    RightsListItem: {
      /** Rights */
      rights?: string | null;
      /** Rightsuri */
      rightsUri?: string | null;
      /** Schemeuri */
      schemeUri?: string | null;
      /** Rightsidentifier */
      rightsIdentifier?: string | null;
      /** Rightsidentifierscheme */
      rightsIdentifierScheme?: string | null;
      /** Lang */
      lang?: string | null;
    };
    /** Subject */
    Subject: {
      /** Subject */
      subject?: string | null;
      /** Subjectscheme */
      subjectScheme?: string | null;
      /** Schemeuri */
      schemeUri?: string | null;
      /** Valueuri */
      valueUri?: string | null;
      /** Lang */
      lang?: string | null;
      /** Classificationcode */
      classificationCode?: string | null;
    };
    /** TermsFacet */
    TermsFacet: {
      /**
       * Field Name
       * @description The field to which the facet refers.
       *     Any dots (`.`) must be escaped with a preceding backslash (`\`) character.
       */
      field_name: string;
      /**
       * Name
       * @description A name for this facet which is referenced in the results.
       *
       *     If `name` is omitted, it will default to the value of the `field_name` property. If more than one facet in a single search request references the same field, a name *must* be provided.
       */
      name?: string | null;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "terms";
      /** Size */
      size?: number | null;
    };
    /** Title */
    Title: {
      /** Title */
      title?: string | null;
      titleType?: components["schemas"]["TitleType"] | null;
      /** Lang */
      lang?: string | null;
    };
    /** Title1 */
    Title1: {
      /** Title */
      title?: string | null;
      titleType?: components["schemas"]["TitleType"] | null;
    };
    /**
     * TitleType
     * @enum {string}
     */
    TitleType: "AlternativeTitle" | "Subtitle" | "TranslatedTitle" | "Other";
    /**
     * Type
     * @constant
     * @enum {string}
     */
    Type: "dois";
    /** Types */
    Types: {
      resourceTypeGeneral?: components["schemas"]["ResourceTypeGeneral"] | null;
      /** Resourcetype */
      resourceType?: string | null;
      /** Schemaorg */
      schemaOrg?: string | null;
      /** Bibtex */
      bibtex?: string | null;
      /** Citeproc */
      citeproc?: string | null;
      /** Ris */
      ris?: string | null;
    };
    /** UploadNotebookRequest */
    UploadNotebookRequest: {
      /** Notebook Name */
      notebook_name: string;
      /** Notebook Json */
      notebook_json: string;
      /**
       * Folder
       * Format: email
       */
      folder: string;
    };
    /** UploadNotebookResponse */
    UploadNotebookResponse: {
      /**
       * Notebook Url
       * Format: uri
       */
      notebook_url: string;
    };
    /** UserMetadataResponse */
    UserMetadataResponse: {
      /** Username */
      username?: string | null;
      /** Name */
      name?: string | null;
      /** Email */
      email?: string | null;
      /** Phone Number */
      phone_number?: string | null;
      /** Affiliations */
      affiliations?: string[] | null;
      /** Skills */
      skills?: string[] | null;
      /** Domains */
      domains?: string[] | null;
      /** Profile Pic Id */
      profile_pic_id?: number | null;
      /**
       * Identity Id
       * Format: uuid
       */
      identity_id: string;
      /** Saved Garden Dois */
      saved_garden_dois?: string[];
    };
    /** UserUpdateRequest */
    UserUpdateRequest: {
      /** Username */
      username?: string | null;
      /** Name */
      name?: string | null;
      /** Email */
      email?: string | null;
      /** Phone Number */
      phone_number?: string | null;
      /** Affiliations */
      affiliations?: string[] | null;
      /** Skills */
      skills?: string[] | null;
      /** Domains */
      domains?: string[] | null;
      /** Profile Pic Id */
      profile_pic_id?: number | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VersionOf */
    VersionOf: {
      data?: components["schemas"]["DoiDataArray"] | null;
    };
    /** Versions */
    Versions: {
      data?: components["schemas"]["DoiDataArray"] | null;
    };
    /** ViewsOverTimeItem */
    ViewsOverTimeItem: {
      /** Yearmonth */
      yearMonth?: string | null;
      /** Total */
      total?: number | null;
    };
    /** _DatasetConnection */
    _DatasetConnection: {
      /** Title */
      title: string;
      /** Doi */
      doi?: string | null;
      /** Url */
      url: string;
      /** Data Type */
      data_type?: string | null;
      /** Repository */
      repository: string;
    };
    /** _DatasetMetadata */
    "_DatasetMetadata-Input": {
      /** Title */
      title: string;
      /** Doi */
      doi: string | null;
      /**
       * Url
       * Format: uri
       */
      url: string;
      /** Data Type */
      data_type: string | null;
      /** Repository */
      repository: string;
    };
    /** _DatasetMetadata */
    "_DatasetMetadata-Output": {
      /** Title */
      title: string;
      /** Doi */
      doi: string | null;
      /** Url */
      url: string;
      /** Data Type */
      data_type: string | null;
      /** Repository */
      repository: string;
    };
    /** _ModalGenericResult */
    _ModalGenericResult: {
      /** Status */
      status: number;
      /**
       * Exception
       * @default
       */
      exception: string;
      /**
       * Traceback
       * @default
       */
      traceback: string;
      /**
       * Serialized Tb
       * @default
       */
      serialized_tb: string;
      /**
       * Tb Line Cache
       * @default
       */
      tb_line_cache: string;
      /**
       * Data
       * @default
       */
      data: string;
      /**
       * Data Blob Id
       * @default
       */
      data_blob_id: string;
    };
    /** _ModelMetadata */
    "_ModelMetadata-Output": {
      /** Model Identifier */
      model_identifier: string;
      /** Model Repository */
      model_repository: string;
      /** Model Version */
      model_version: string | null;
    };
    /** _Paper */
    _Paper: {
      /** Title */
      title: string;
      /** Authors */
      authors?: string[];
      /** Doi */
      doi?: string | null;
      /** Citation */
      citation?: string | null;
    };
    /** _PaperMetadata */
    _PaperMetadata: {
      /** Title */
      title: string;
      /** Authors */
      authors?: string[];
      /** Doi */
      doi: string | null;
      /** Citation */
      citation: string | null;
    };
    /** _PublishedGarden */
    _PublishedGarden: {
      /** Title */
      title: string;
      /** Authors */
      authors: string[];
      /** Contributors */
      contributors?: unknown[];
      /** Doi */
      doi: string;
      /** Description */
      description?: string | null;
      /**
       * Publisher
       * @default Garden-AI
       */
      publisher: string;
      /** Year */
      year?: string;
      /**
       * Language
       * @default en
       */
      language: string;
      /** Tags */
      tags?: unknown[];
      /**
       * Version
       * @default 0.0.1
       */
      version: string;
      /** Entrypoints */
      entrypoints: components["schemas"]["_RegisteredEntrypoint"][];
      /** Entrypoint Aliases */
      entrypoint_aliases?: {
        [key: string]: string;
      };
    };
    /** _RegisteredEntrypoint */
    _RegisteredEntrypoint: {
      /** Doi */
      doi: string;
      /** Title */
      title: string;
      /** Authors */
      authors: string[];
      /** Short Name */
      short_name?: string | null;
      /** Description */
      description?: string | null;
      /** Year */
      year?: string;
      /** Tags */
      tags?: string[];
      /** Models */
      models?: components["schemas"]["src__api__schemas__search___garden_sdk_schema___ModelMetadata"][];
      /** Repositories */
      repositories?: components["schemas"]["_Repository"][];
      /** Papers */
      papers?: components["schemas"]["_Paper"][];
      /** Datasets */
      datasets?: components["schemas"]["_DatasetConnection"][];
      /**
       * Doi Is Draft
       * @default true
       */
      doi_is_draft: boolean;
      /**
       * Func Uuid
       * Format: uuid
       */
      func_uuid: string;
      /**
       * Container Uuid
       * Format: uuid
       */
      container_uuid: string;
      /** Base Image Uri */
      base_image_uri?: string | null;
      /** Full Image Uri */
      full_image_uri?: string | null;
      /** Notebook Url */
      notebook_url?: string | null;
      /** Steps */
      steps?: components["schemas"]["_Step"][];
      /** Test Functions */
      test_functions?: string[];
    };
    /** _Repository */
    _Repository: {
      /** Repo Name */
      repo_name: string;
      /** Url */
      url: string;
      /** Contributors */
      contributors?: string[];
    };
    /** _RepositoryMetadata */
    "_RepositoryMetadata-Input": {
      /** Repo Name */
      repo_name: string;
      /**
       * Url
       * Format: uri
       */
      url: string;
      /** Contributors */
      contributors?: string[];
    };
    /** _RepositoryMetadata */
    "_RepositoryMetadata-Output": {
      /** Repo Name */
      repo_name: string;
      /** Url */
      url: string;
      /** Contributors */
      contributors?: string[];
    };
    /** _Step */
    _Step: {
      /** Function Name */
      function_name: string;
      /** Function Text */
      function_text: string;
      /** Description */
      description?: string | null;
    };
    /** _ModelMetadata */
    src__api__schemas__entrypoint___ModelMetadata: {
      /** Model Identifier */
      model_identifier: string;
      /** Model Repository */
      model_repository: string;
      /** Model Version */
      model_version: string | null;
    };
    /** _ModelMetadata */
    src__api__schemas__modal__modal_function___ModelMetadata: {
      /** Model Identifier */
      model_identifier: string;
      /** Model Repository */
      model_repository: string;
      /** Model Version */
      model_version: string | null;
    };
    /** _ModelMetadata */
    src__api__schemas__search___garden_sdk_schema___ModelMetadata: {
      /** Model Identifier */
      model_identifier: string;
      /** Model Repository */
      model_repository: string;
      /** Model Version */
      model_version?: string | null;
      /** Datasets */
      datasets?: components["schemas"]["_DatasetConnection"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  greet_authed_user_greet_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  update_datacite_doi_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doi"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  mint_draft_doi_doi_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doi"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_push_session_docker_push_token_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ECRPushCredentials"];
        };
      };
    };
  };
  upload_notebook_notebook_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UploadNotebookRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UploadNotebookResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  publish_search_record_garden_search_record_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["_PublishedGarden"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_search_record_garden_search_record_delete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteSearchRecordRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  hello_postgres_hello_database_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  get_entrypoints_entrypoints_get: {
    parameters: {
      query?: {
        doi?: string[] | null;
        tags?: string[] | null;
        authors?: string[] | null;
        owner_uuid?: string | null;
        draft?: boolean | null;
        year?: string | null;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntrypointMetadataResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  add_entrypoint_entrypoints_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntrypointCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntrypointMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_entrypoint_by_doi_entrypoints__doi__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntrypointMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_or_replace_entrypoint_entrypoints__doi__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntrypointCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntrypointMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_entrypoint_entrypoints__doi__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_entrypoint_entrypoints__doi__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntrypointPatchRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntrypointMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  search_gardens_gardens_get: {
    parameters: {
      query?: {
        doi?: string[] | null;
        draft?: boolean | null;
        owner_uuid?: string | null;
        authors?: string[] | null;
        contributors?: string[] | null;
        tags?: string[] | null;
        year?: string | null;
        limit?: number | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  add_garden_gardens_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GardenCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_garden_by_doi_gardens__doi__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_or_replace_garden_gardens__doi__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GardenCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_garden_gardens__doi__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_garden_gardens__doi__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        doi: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GardenPatchRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_info_users_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserMetadataResponse"];
        };
      };
    };
  };
  update_user_info_users_patch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_saved_gardens_users__user_uuid__saved_gardens_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  save_garden_users__user_uuid__saved_gardens__doi__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_uuid: string;
        doi: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  remove_saved_garden_users__user_uuid__saved_gardens__doi__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_uuid: string;
        doi: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GardenMetadataResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_failed_updates_status_failed_updates_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FailedSearchIndexUpdateResponse"][];
        };
      };
    };
  };
  invoke_modal_fn_modal_invocations_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModalInvocationRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ModalInvocationResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  add_modal_app_modal_apps_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModalAppCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ModalAppMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_modal_apps_modal_apps__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ModalAppMetadataResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  search_datasets_mdf_search_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GSearchRequestBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MDFSearchResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  greet_world__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
