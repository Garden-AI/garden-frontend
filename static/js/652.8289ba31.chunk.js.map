{"version":3,"file":"static/js/652.8289ba31.chunk.js","mappings":"6LAEaA,EAAW,CACpBC,EAAAA,EAAAA,IAAS,wKAAwK,WAC7K,OAAOC,EAAAA,EAAAA,KACH,iqCAER,IACAD,EAAAA,EAAAA,IAAS,sFAAsF,WAC3F,OAAOC,EAAAA,EAAAA,KAAkB,CACrB,MAAS,EACT,MAAS,CACL,CACI,YAAa,cACb,QAAW,qBACX,WAAY,aACZ,QAAW,CACP,CACI,QAAW,CACP,mBAAsB,CAAC,EACvB,KAAQ,OACR,YAAe,8GACf,SAAY,KACZ,MAAS,kBACT,KAAQ,CAAC,WACT,YAAe,CACX,CACI,OAAU,CACN,CACI,iBAAoB,iCACpB,iBAAoB,eACpB,SAAY,CAAC,CACT,MAAS,qDACT,IAAO,qBACP,IAAO,yDACP,UAAa,KACb,WAAc,cAI1B,OAAU,CACN,CACI,MAAS,2FACT,QAAW,CAAC,YAAa,aAAc,aAAc,oBAAqB,mBAAoB,gBAC9F,IAAO,2BACP,SAAY,8DAGpB,aAAgB,CACZ,CACI,UAAa,aACb,IAAO,mDACP,aAAgB,CAAC,sBAGzB,KAAQ,OACR,eAAkB,yEAClB,eAAkB,iDAClB,YAAe,kGACf,UAAa,uCACb,MAAS,0CACT,aAAgB,uKAChB,KAAQ,GACR,MAAS,CACL,CACI,cAAiB,2BACjB,cAAiB,0oBACjB,YAAe,0EAGvB,WAAc,mCACd,IAAO,qBACP,QAAW,CACP,iBAIZ,UAAa,YACb,aAAgB,GAChB,eAAkB,CACd,sBAEJ,QAAW,CACP,eAEJ,IAAO,sBAEX,SAAY,KACZ,uBAA0B,OAK1C,YAAa,gBACb,WAAY,aACZ,OAAU,EACV,MAAS,EACT,eAAiB,GAE3B,KChGWC,EAASC,EAAAA,EAAAA,WAAY,GAADC,EAAAA,EAAAA,GAAIL,G","sources":["mocks/handlers.ts","mocks/browser.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw'\n\nexport const handlers = [\n    http.get('https://pipeline-notebooks-dev.s3.amazonaws.com/willengler@uchicago.edu/iris_classifier.ipynb-23e7e94c476b299a73c446ad1ea25351b8025d011b26b784de07cdd544ebd874.ipynb', () => {\n        return HttpResponse.text(\n            \"{\\\"cells\\\":[{\\\"cell_type\\\":\\\"markdown\\\",\\\"metadata\\\":{},\\\"source\\\":[\\\"### Running the cell below will load every definition in your original notebook within a containerized environment.\\\"]},{\\\"cell_type\\\":\\\"code\\\",\\\"execution_count\\\":null,\\\"metadata\\\":{},\\\"outputs\\\":[],\\\"source\\\":[\\\"import dill\\\\n\\\",\\\"\\\\n\\\",\\\"_globals_pre_load = dict(globals())\\\\n\\\",\\\"\\\\n\\\",\\\"dill.load_session(\\\\\\\"session.pkl\\\\\\\")\\\\n\\\",\\\"print([k for k in globals() if k not in _globals_pre_load])  # displays everything that was loaded\\\\n\\\",\\\"\\\\n\\\",\\\"del dill\\\\n\\\",\\\"del _globals_pre_load\\\"]},{\\\"cell_type\\\":\\\"markdown\\\",\\\"metadata\\\":{},\\\"source\\\":[\\\"### Now that your definitions have been loaded, feel free to test anything you like with confidence that this environment is nearly identical to the one that is executed remotely.\\\"]},{\\\"cell_type\\\":\\\"code\\\",\\\"execution_count\\\":null,\\\"metadata\\\":{},\\\"outputs\\\":[],\\\"source\\\":[]}],\\\"metadata\\\":{\\\"kernelspec\\\":{\\\"display_name\\\":\\\"Python 3 (ipykernel)\\\",\\\"language\\\":\\\"python\\\",\\\"name\\\":\\\"python3\\\"},\\\"language_info\\\":{\\\"codemirror_mode\\\":{\\\"name\\\":\\\"ipython\\\",\\\"version\\\":3},\\\"file_extension\\\":\\\".py\\\",\\\"mimetype\\\":\\\"text/x-python\\\",\\\"name\\\":\\\"python\\\",\\\"nbconvert_exporter\\\":\\\"python\\\",\\\"pygments_lexer\\\":\\\"ipython3\\\",\\\"version\\\":\\\"3.10.12\\\"}},\\\"nbformat\\\":4,\\\"nbformat_minor\\\":4}\"\n        );\n    }),\n    http.get('https://search.api.globus.org/v1/index/58e4df29-4492-4e7d-9317-b27eba62a911/search', () => {\n        return HttpResponse.json({\n            \"total\": 1,\n            \"gmeta\": [\n                {\n                    \"@datatype\": \"GMetaResult\",\n                    \"subject\": \"10.23677/4ksa-8x13\",\n                    \"@version\": \"2019-08-27\",\n                    \"entries\": [\n                        {\n                            \"content\": {\n                                \"entrypoint_aliases\": {},\n                                \"year\": \"2023\",\n                                \"description\": \"A collection of seedling gardens that illustrate the different flavors of ML libraries that Garden supports\",\n                                \"language\": \"en\",\n                                \"title\": \"Flavor Examples\",\n                                \"tags\": [\"science\"],\n                                \"entrypoints\": [\n                                    {\n                                        \"models\": [\n                                            {\n                                                \"model_identifier\": \"willengler-uc/steel-classifier\",\n                                                \"model_repository\": \"Hugging Face\",\n                                                \"datasets\": [{\n                                                    \"title\": \"Training Dataset for Locating Atoms in STEM images\", \n                                                    \"doi\": \"10.18126/qsdl-aj6x\", \n                                                    \"url\": \"https://foundry-ml.org/#/datasets/10.18126%2Fqsdl-aj6x\",\n                                                    \"data_type\": null,\n                                                    \"repository\": \"Foundry\"\n                                                }]\n                                            }\n                                        ],\n                                        \"papers\": [\n                                            {\n                                                \"title\": \"End-to-end AI framework for interpretable prediction of molecular and crystal properties\", \n                                                \"authors\": [\"Hyun Park\", \"Ruijie Zhu\", \"E A Huerta\", \"Santanu Chaudhuri\", \"Emad Tajkhorshid\", \"Donny Cooper\"], \n                                                \"doi\": \"10.1088/2632-2153/acd434\", \n                                                \"citation\": \"Hyun Park et al 2023 Mach. Learn.: Sci. Technol. 4 025036\"\n                                            }\n                                        ],\n                                        \"repositories\": [\n                                            {\n                                                \"repo_name\": \"Peptimizer\", \n                                                \"url\": \"https://github.com/learningmatter-mit/peptimizer\", \n                                                \"contributors\": [\"Somesh Mohapatra\"]\n                                            }\n                                        ],\n                                        \"year\": \"2023\",\n                                        \"base_image_uri\": \"docker://index.docker.io/maxtuecke/garden-ai:python-3.10-jupyter-torch\",\n                                        \"full_image_uri\": \"docker://index.docker.io/willengler/dev:latest\",\n                                        \"description\": \"Pipeline for predicting the tensile strength (in MPa) of different compositions of alloy steels\",\n                                        \"func_uuid\": \"2a4fff73-6e1d-479f-8ad2-a92fc20070ca\",\n                                        \"title\": \"Steel Alloy Tensile Strength Prediction\",\n                                        \"notebook_url\": \"https://pipeline-notebooks-dev.s3.amazonaws.com/willengler@uchicago.edu/iris_classifier.ipynb-23e7e94c476b299a73c446ad1ea25351b8025d011b26b784de07cdd544ebd874.ipynb\",\n                                        \"tags\": [],\n                                        \"steps\": [\n                                            {\n                                                \"function_name\": \"predict_tensile_strength\",\n                                                \"function_text\": \"def predict_tensile_strength(composition: str) -> float:\\n    \\\"\\\"\\\"Predicts the tensile strength of a steel alloy given its composition.\\n\\n    Args:\\n        composition (str): The composition of the alloy in the form of \\\"Fe0.8C0.2\\\".\\n\\n    Returns:\\n        float: The predicted tensile strength of the alloy in MPa.\\n    \\\"\\\"\\\"\\n    # Load the model\\n    model = load_model()\\n\\n    # Convert the composition to a feature vector\\n    feature_vector = convert_composition_to_feature_vector(composition)\\n\\n    # Predict the tensile strength\\n    prediction = model.predict(feature_vector)\\n\\n    # Return the prediction\\n    return prediction[0][0]\\n\",\n                                                \"description\": \"Predicts the tensile strength of a steel alloy given its composition.\"\n                                            }\n                                        ],\n                                        \"short_name\": \"sklearn_tensile_strength_predict\",\n                                        \"doi\": \"10.23677/etya-kq52\",\n                                        \"authors\": [\n                                            \"Will Engler\"\n                                        ]\n                                    },\n                                ],\n                                \"publisher\": \"Garden-AI\",\n                                \"contributors\": [],\n                                \"entrypoint_ids\": [\n                                    \"10.23677/etya-kq52\",\n                                ],\n                                \"authors\": [\n                                    \"Will Engler\"\n                                ],\n                                \"doi\": \"10.23677/4ksa-8x13\"\n                            },\n                            \"entry_id\": null,\n                            \"matched_principal_sets\": []\n                        }\n                    ]\n                }\n            ],\n            \"@datatype\": \"GSearchResult\",\n            \"@version\": \"2017-09-01\",\n            \"offset\": 0,\n            \"count\": 1,\n            \"has_next_page\": false\n        })\n  }),\n]","import { setupWorker } from 'msw/browser'\nimport { handlers } from './handlers'\n \nexport const worker = setupWorker(...handlers)"],"names":["handlers","http","HttpResponse","worker","setupWorker","_toConsumableArray"],"sourceRoot":""}